// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistance.Data;

namespace Persistance.Migrations
{
    [DbContext(typeof(AnimalContext))]
    [Migration("20200427105945_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Models.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Berlin"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Hamburg"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Munich"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Cologne"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Frankfurt"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Stuttgart"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Dusseldorf"
                        },
                        new
                        {
                            Id = 8L,
                            Name = "Dortmund"
                        },
                        new
                        {
                            Id = 9L,
                            Name = "Essen"
                        },
                        new
                        {
                            Id = 10L,
                            Name = "Leipzig"
                        });
                });

            modelBuilder.Entity("Domain.Models.AdoptOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AnimalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ClosingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserMotivation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("UserId");

                    b.ToTable("AdoptOrders");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AnimalId = 9L,
                            ClosingDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndingDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            UserId = "1",
                            UserMotivation = "i want to adopt this pet, because i am alone, and need friend"
                        },
                        new
                        {
                            Id = 2L,
                            AdminComment = "Declined because your cause is criminal",
                            AnimalId = 3L,
                            ClosingDate = new DateTime(2019, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndingDate = new DateTime(2019, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            UserId = "2",
                            UserMotivation = "i want to adopt this pet, because i have kebab cafe at the city center"
                        },
                        new
                        {
                            Id = 3L,
                            AnimalId = 10L,
                            ClosingDate = new DateTime(2019, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndingDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            UserId = "1",
                            UserMotivation = "i want to adopt this pet, because i love pets, and want to help them"
                        });
                });

            modelBuilder.Entity("Domain.Models.Animal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<long>("BreedId")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChipNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("ContinuatitonOfTreatment")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<long>("FoodId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("FoundDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNew")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<double>("NeckCircumference")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Sterialization")
                        .HasColumnType("int");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.Property<double>("WithersHeight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("BreedId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FoodId");

                    b.ToTable("Animals");

                    b.HasData(
                        new
                        {
                            Id = 2L,
                            AddressId = 2L,
                            BreedId = 7L,
                            CategoryId = 2L,
                            ChipNumber = 13345678L,
                            ContinuatitonOfTreatment = false,
                            Created = new DateTime(2019, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2017, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodId = 2L,
                            FoundDate = new DateTime(2019, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 1,
                            IsHidden = false,
                            IsNew = true,
                            Name = "Lola",
                            NeckCircumference = 9.1999999999999993,
                            Status = 1,
                            Sterialization = 2,
                            ViewCount = 0,
                            Weight = 25.5,
                            WithersHeight = 45.0
                        },
                        new
                        {
                            Id = 3L,
                            AddressId = 1L,
                            BreedId = 6L,
                            CategoryId = 1L,
                            ChipNumber = 12245678L,
                            Comment = "Good pet. Ty for service.",
                            ContinuatitonOfTreatment = true,
                            Created = new DateTime(2019, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2018, 10, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodId = 1L,
                            FoundDate = new DateTime(2019, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            IsHidden = false,
                            IsNew = false,
                            Name = "Josh",
                            NeckCircumference = 10.199999999999999,
                            Status = 2,
                            Sterialization = 0,
                            ViewCount = 0,
                            Weight = 15.5,
                            WithersHeight = 15.0
                        },
                        new
                        {
                            Id = 4L,
                            AddressId = 4L,
                            BreedId = 5L,
                            CategoryId = 3L,
                            ChipNumber = 12445678L,
                            ContinuatitonOfTreatment = false,
                            Created = new DateTime(2019, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2014, 10, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodId = 3L,
                            FoundDate = new DateTime(2019, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            IsHidden = false,
                            IsNew = false,
                            Name = "Jimbo",
                            NeckCircumference = 10.199999999999999,
                            Status = 0,
                            Sterialization = 1,
                            ViewCount = 0,
                            Weight = 5.5,
                            WithersHeight = 5.0
                        },
                        new
                        {
                            Id = 5L,
                            AddressId = 1L,
                            BreedId = 4L,
                            CategoryId = 1L,
                            ChipNumber = 12355678L,
                            ContinuatitonOfTreatment = false,
                            Created = new DateTime(2019, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2018, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodId = 1L,
                            FoundDate = new DateTime(2019, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 1,
                            IsHidden = false,
                            IsNew = false,
                            Name = "Arnold",
                            NeckCircumference = 10.199999999999999,
                            Status = 0,
                            Sterialization = 0,
                            ViewCount = 0,
                            Weight = 2.5,
                            WithersHeight = 15.0
                        },
                        new
                        {
                            Id = 6L,
                            AddressId = 6L,
                            BreedId = 3L,
                            CategoryId = 2L,
                            ChipNumber = 12346678L,
                            ContinuatitonOfTreatment = true,
                            Created = new DateTime(2019, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2019, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodId = 2L,
                            FoundDate = new DateTime(2019, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            IsHidden = false,
                            IsNew = true,
                            Name = "Sonia",
                            NeckCircumference = 1.2,
                            Status = 0,
                            Sterialization = 0,
                            ViewCount = 0,
                            Weight = 25.5,
                            WithersHeight = 45.0
                        },
                        new
                        {
                            Id = 7L,
                            AddressId = 6L,
                            BreedId = 3L,
                            CategoryId = 1L,
                            ChipNumber = 12345778L,
                            ContinuatitonOfTreatment = true,
                            Created = new DateTime(2019, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2016, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodId = 1L,
                            FoundDate = new DateTime(2019, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            IsHidden = false,
                            IsNew = true,
                            Name = "Havoc",
                            NeckCircumference = 10.199999999999999,
                            Status = 0,
                            Sterialization = 2,
                            ViewCount = 0,
                            Weight = 25.5,
                            WithersHeight = 45.0
                        },
                        new
                        {
                            Id = 8L,
                            AddressId = 2L,
                            BreedId = 2L,
                            CategoryId = 1L,
                            ChipNumber = 12345688L,
                            ContinuatitonOfTreatment = true,
                            Created = new DateTime(2018, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2017, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodId = 1L,
                            FoundDate = new DateTime(2017, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            IsHidden = false,
                            IsNew = false,
                            Name = "Khora",
                            NeckCircumference = 10.199999999999999,
                            Status = 0,
                            Sterialization = 0,
                            ViewCount = 0,
                            Weight = 2.5,
                            WithersHeight = 15.0
                        },
                        new
                        {
                            Id = 9L,
                            AddressId = 2L,
                            BreedId = 2L,
                            CategoryId = 2L,
                            ChipNumber = 12345681L,
                            ContinuatitonOfTreatment = false,
                            Created = new DateTime(2018, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2018, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodId = 1L,
                            FoundDate = new DateTime(2017, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 1,
                            IsHidden = false,
                            IsNew = true,
                            Name = "Alpaca",
                            NeckCircumference = 1.2,
                            Status = 0,
                            Sterialization = 1,
                            ViewCount = 0,
                            Weight = 12.5,
                            WithersHeight = 5.0
                        },
                        new
                        {
                            Id = 10L,
                            AddressId = 5L,
                            BreedId = 1L,
                            CategoryId = 1L,
                            ChipNumber = 33345688L,
                            ContinuatitonOfTreatment = true,
                            Created = new DateTime(2018, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2018, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodId = 3L,
                            FoundDate = new DateTime(2017, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            IsHidden = false,
                            IsNew = false,
                            Name = "Bee",
                            NeckCircumference = 10.199999999999999,
                            Status = 0,
                            Sterialization = 0,
                            ViewCount = 0,
                            Weight = 2.5,
                            WithersHeight = 15.0
                        },
                        new
                        {
                            Id = 11L,
                            AddressId = 4L,
                            BreedId = 9L,
                            CategoryId = 3L,
                            ChipNumber = 11145688L,
                            ContinuatitonOfTreatment = true,
                            Created = new DateTime(2018, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2014, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodId = 2L,
                            FoundDate = new DateTime(2017, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 1,
                            IsHidden = false,
                            IsNew = false,
                            Name = "Puma",
                            NeckCircumference = 10.199999999999999,
                            Status = 0,
                            Sterialization = 0,
                            ViewCount = 0,
                            Weight = 21.5,
                            WithersHeight = 5.0
                        },
                        new
                        {
                            Id = 12L,
                            AddressId = 1L,
                            BreedId = 3L,
                            CategoryId = 1L,
                            ChipNumber = 444445688L,
                            ContinuatitonOfTreatment = false,
                            Created = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2019, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodId = 1L,
                            FoundDate = new DateTime(2017, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            IsHidden = false,
                            IsNew = true,
                            Name = "Aladin",
                            NeckCircumference = 10.199999999999999,
                            Status = 0,
                            Sterialization = 0,
                            ViewCount = 0,
                            Weight = 222.5,
                            WithersHeight = 15.0
                        },
                        new
                        {
                            Id = 13L,
                            AddressId = 2L,
                            BreedId = 4L,
                            CategoryId = 1L,
                            ChipNumber = 12342138L,
                            ContinuatitonOfTreatment = true,
                            Created = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2019, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodId = 1L,
                            FoundDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            IsHidden = false,
                            IsNew = true,
                            Name = "Alkadin",
                            NeckCircumference = 10.199999999999999,
                            Status = 0,
                            Sterialization = 0,
                            ViewCount = 0,
                            Weight = 2.5,
                            WithersHeight = 15.0
                        },
                        new
                        {
                            Id = 14L,
                            AddressId = 2L,
                            BreedId = 1L,
                            CategoryId = 1L,
                            ChipNumber = 32132688L,
                            ContinuatitonOfTreatment = true,
                            Created = new DateTime(2018, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2018, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodId = 1L,
                            FoundDate = new DateTime(2018, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            IsHidden = false,
                            IsNew = false,
                            Name = "Neo",
                            NeckCircumference = 10.199999999999999,
                            Status = 0,
                            Sterialization = 0,
                            ViewCount = 0,
                            Weight = 42.5,
                            WithersHeight = 125.0
                        },
                        new
                        {
                            Id = 15L,
                            AddressId = 4L,
                            BreedId = 7L,
                            CategoryId = 2L,
                            ChipNumber = 88885688L,
                            ContinuatitonOfTreatment = false,
                            Created = new DateTime(2015, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2018, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodId = 3L,
                            FoundDate = new DateTime(2014, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 1,
                            IsHidden = false,
                            IsNew = false,
                            Name = "Theo",
                            NeckCircumference = 0.20000000000000001,
                            Status = 0,
                            Sterialization = 0,
                            ViewCount = 0,
                            Weight = 2.5,
                            WithersHeight = 15.0
                        },
                        new
                        {
                            Id = 16L,
                            AddressId = 3L,
                            BreedId = 7L,
                            CategoryId = 2L,
                            ChipNumber = 12345611L,
                            ContinuatitonOfTreatment = true,
                            Created = new DateTime(2018, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2015, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodId = 2L,
                            FoundDate = new DateTime(2017, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            IsHidden = false,
                            IsNew = false,
                            Name = "Baron",
                            NeckCircumference = 10.199999999999999,
                            Status = 0,
                            Sterialization = 0,
                            ViewCount = 0,
                            Weight = 2.5,
                            WithersHeight = 15.0
                        });
                });

            modelBuilder.Entity("Domain.Models.AnimalAttitudeTo", b =>
                {
                    b.Property<long>("AnimalId")
                        .HasColumnType("bigint");

                    b.Property<long>("AttitudeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Mark")
                        .HasColumnType("int");

                    b.HasKey("AnimalId", "AttitudeId");

                    b.HasIndex("AttitudeId");

                    b.ToTable("AnimalAttitudeTo");

                    b.HasData(
                        new
                        {
                            AnimalId = 4L,
                            AttitudeId = 1L,
                            Mark = 3
                        },
                        new
                        {
                            AnimalId = 2L,
                            AttitudeId = 2L,
                            Mark = 3
                        },
                        new
                        {
                            AnimalId = 12L,
                            AttitudeId = 1L,
                            Mark = 3
                        },
                        new
                        {
                            AnimalId = 11L,
                            AttitudeId = 2L,
                            Mark = 2
                        },
                        new
                        {
                            AnimalId = 11L,
                            AttitudeId = 1L,
                            Mark = 5
                        },
                        new
                        {
                            AnimalId = 11L,
                            AttitudeId = 3L,
                            Mark = 4
                        });
                });

            modelBuilder.Entity("Domain.Models.AnimalDefects", b =>
                {
                    b.Property<long>("AnimalId")
                        .HasColumnType("bigint");

                    b.Property<long>("DefectsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnimalId", "DefectsId");

                    b.HasIndex("DefectsId");

                    b.ToTable("AnimalDefects");

                    b.HasData(
                        new
                        {
                            AnimalId = 13L,
                            DefectsId = 1L
                        },
                        new
                        {
                            AnimalId = 10L,
                            DefectsId = 2L
                        },
                        new
                        {
                            AnimalId = 8L,
                            DefectsId = 1L
                        },
                        new
                        {
                            AnimalId = 11L,
                            DefectsId = 4L
                        });
                });

            modelBuilder.Entity("Domain.Models.AnimalDescription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AnimalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageUa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId")
                        .IsUnique();

                    b.ToTable("AnimalDescriptions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AnimalId = 2L,
                            LanguageEn = "Hi its dog",
                            LanguageUa = "Привіт це песик"
                        },
                        new
                        {
                            Id = 2L,
                            AnimalId = 3L,
                            LanguageEn = "Hi its cat",
                            LanguageUa = "Привіт це котик"
                        },
                        new
                        {
                            Id = 3L,
                            AnimalId = 4L,
                            LanguageEn = "Hi its pet",
                            LanguageUa = "Привіт це тваринка"
                        },
                        new
                        {
                            Id = 4L,
                            AnimalId = 5L,
                            LanguageEn = "Hi its another pet",
                            LanguageUa = "Привіт це інша тваринка"
                        },
                        new
                        {
                            Id = 5L,
                            AnimalId = 6L,
                            LanguageEn = "Hi its friandly pet",
                            LanguageUa = "Привіт це дружелюбна тваринка"
                        },
                        new
                        {
                            Id = 6L,
                            AnimalId = 7L,
                            LanguageEn = "Hi its cute pet",
                            LanguageUa = "Привіт це мила тваринка"
                        });
                });

            modelBuilder.Entity("Domain.Models.AnimalKeeping", b =>
                {
                    b.Property<long>("AnimalId")
                        .HasColumnType("bigint");

                    b.Property<long>("KeepingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnimalId", "KeepingId");

                    b.HasIndex("KeepingId");

                    b.ToTable("AnimalKeeping");

                    b.HasData(
                        new
                        {
                            AnimalId = 2L,
                            KeepingId = 3L
                        },
                        new
                        {
                            AnimalId = 2L,
                            KeepingId = 1L
                        },
                        new
                        {
                            AnimalId = 3L,
                            KeepingId = 3L
                        },
                        new
                        {
                            AnimalId = 4L,
                            KeepingId = 2L
                        },
                        new
                        {
                            AnimalId = 5L,
                            KeepingId = 1L
                        },
                        new
                        {
                            AnimalId = 6L,
                            KeepingId = 2L
                        },
                        new
                        {
                            AnimalId = 7L,
                            KeepingId = 1L
                        },
                        new
                        {
                            AnimalId = 8L,
                            KeepingId = 2L
                        },
                        new
                        {
                            AnimalId = 9L,
                            KeepingId = 1L
                        },
                        new
                        {
                            AnimalId = 10L,
                            KeepingId = 2L
                        },
                        new
                        {
                            AnimalId = 11L,
                            KeepingId = 1L
                        },
                        new
                        {
                            AnimalId = 12L,
                            KeepingId = 2L
                        },
                        new
                        {
                            AnimalId = 12L,
                            KeepingId = 1L
                        },
                        new
                        {
                            AnimalId = 13L,
                            KeepingId = 1L
                        },
                        new
                        {
                            AnimalId = 14L,
                            KeepingId = 2L
                        },
                        new
                        {
                            AnimalId = 15L,
                            KeepingId = 1L
                        },
                        new
                        {
                            AnimalId = 16L,
                            KeepingId = 1L
                        });
                });

            modelBuilder.Entity("Domain.Models.AnimalLocationHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<long>("AnimalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("AnimalId");

                    b.ToTable("AnimalLocationHistories");
                });

            modelBuilder.Entity("Domain.Models.AnimalNeeds", b =>
                {
                    b.Property<long>("AnimalId")
                        .HasColumnType("bigint");

                    b.Property<long>("NeedsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnimalId", "NeedsId");

                    b.HasIndex("NeedsId");

                    b.ToTable("AnimalNeeds");

                    b.HasData(
                        new
                        {
                            AnimalId = 2L,
                            NeedsId = 3L
                        },
                        new
                        {
                            AnimalId = 2L,
                            NeedsId = 2L
                        },
                        new
                        {
                            AnimalId = 3L,
                            NeedsId = 1L
                        },
                        new
                        {
                            AnimalId = 7L,
                            NeedsId = 3L
                        },
                        new
                        {
                            AnimalId = 8L,
                            NeedsId = 2L
                        },
                        new
                        {
                            AnimalId = 14L,
                            NeedsId = 1L
                        });
                });

            modelBuilder.Entity("Domain.Models.AnimalProcessing", b =>
                {
                    b.Property<long>("AnimalId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProcessingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRepeat")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NextProcessingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ProcessingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AnimalId", "ProcessingId");

                    b.HasIndex("ProcessingId");

                    b.ToTable("AnimalProcessing");

                    b.HasData(
                        new
                        {
                            AnimalId = 7L,
                            ProcessingId = 1L,
                            IsRepeat = true,
                            NextProcessingDate = new DateTime(2020, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProcessingDate = new DateTime(2019, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AnimalId = 4L,
                            ProcessingId = 2L,
                            IsRepeat = true,
                            NextProcessingDate = new DateTime(2020, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProcessingDate = new DateTime(2019, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AnimalId = 8L,
                            ProcessingId = 2L,
                            IsRepeat = false,
                            NextProcessingDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProcessingDate = new DateTime(2019, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AnimalId = 11L,
                            ProcessingId = 1L,
                            IsRepeat = true,
                            NextProcessingDate = new DateTime(2020, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProcessingDate = new DateTime(2019, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AnimalId = 11L,
                            ProcessingId = 2L,
                            IsRepeat = true,
                            NextProcessingDate = new DateTime(2020, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProcessingDate = new DateTime(2019, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AnimalId = 9L,
                            ProcessingId = 2L,
                            IsRepeat = false,
                            NextProcessingDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProcessingDate = new DateTime(2019, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Domain.Models.AnimalVaccination", b =>
                {
                    b.Property<long>("AnimalId")
                        .HasColumnType("bigint");

                    b.Property<long>("VaccinationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("VaccinationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NextVaccinationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnimalId", "VaccinationId", "VaccinationDate", "NextVaccinationDate");

                    b.HasIndex("VaccinationId");

                    b.ToTable("AnimalVaccination");

                    b.HasData(
                        new
                        {
                            AnimalId = 2L,
                            VaccinationId = 3L,
                            VaccinationDate = new DateTime(2019, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NextVaccinationDate = new DateTime(2020, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AnimalId = 2L,
                            VaccinationId = 4L,
                            VaccinationDate = new DateTime(2019, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NextVaccinationDate = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AnimalId = 3L,
                            VaccinationId = 2L,
                            VaccinationDate = new DateTime(2019, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NextVaccinationDate = new DateTime(2020, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AnimalId = 5L,
                            VaccinationId = 1L,
                            VaccinationDate = new DateTime(2019, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NextVaccinationDate = new DateTime(2020, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AnimalId = 5L,
                            VaccinationId = 3L,
                            VaccinationDate = new DateTime(2019, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NextVaccinationDate = new DateTime(2020, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AnimalId = 5L,
                            VaccinationId = 5L,
                            VaccinationDate = new DateTime(2019, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NextVaccinationDate = new DateTime(2020, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Domain.Models.AnimalVideo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AnimalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.ToTable("AnimalVideos");
                });

            modelBuilder.Entity("Domain.Models.AnimalViewLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AnimalId")
                        .HasColumnType("bigint");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.ToTable("AnimalViewLocations");
                });

            modelBuilder.Entity("Domain.Models.Article", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Content = "Vaccines are understood to be one of the greatest breakthroughs in modern medicine. Here, Health Europa explores how vaccines have benefitted not only humans but also animals, and limited the transmission of zoonotic diseases.How are animal vaccines preventing the transmission of zoonotic diseases?The vaccination of pets and farm animals is essential in order to maintain good animal health and welfare,whilst also reducing the disease burden in pets and livestock.As mutations of infection and disease develop,the role of vaccines in preventative treatment and disease control programmes is integral.With a long and successful history of preventing and controlling disease,the veterinary vaccines of today are symbolic of years of cutting - edge research but also represent the diseases faced by pets and livestock.",
                            CreatedBy = "pets.adoption.service@gmail.com",
                            Title = "Vaccination in animals",
                            UserId = "1",
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 2L,
                            Content = "Animal health includes the healthcare of animals that implement government policies to prevent or to manage outbreaks of serious animal diseases and to support the farming industry. It involves animal health care programs and protection of the livestock and wildlife in the environment. Mainly the exotic and rare species of the animals are managed with utmost care in the given areas.Given that the data in the study comes from death certificates, which are notoriously inaccurate, it's impossible to tell how much the data reflects reality. And since the study only looks at fatalities, not injuries, it's not clear how many people come close to death but make it out alive. But overall, the message of the study is surprisingly heartening for an analysis of death. You may be scared of scorpions and bears, but animal interactions rarely turn deadly. And besides: given humans' ability to wipe out plants, animals, and each other, we're still one of the most dangerous species in America ... and on Earth",
                            CreatedBy = "pets.adoption.service@gmail.com",
                            Title = "Animal health",
                            UserId = "1",
                            ViewCount = 0
                        });
                });

            modelBuilder.Entity("Domain.Models.ArticleImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ArticleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticleImages");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ArticleId = 1L,
                            FileName = "vivcharka",
                            ImageData = "https://uapasvideos.blob.core.windows.net/videos/D:/video/vivcharka.jpg"
                        },
                        new
                        {
                            Id = 2L,
                            ArticleId = 1L,
                            FileName = "vivcharkaTwo",
                            ImageData = "https://uapasvideos.blob.core.windows.net/videos/D:/video/vivcharkaTwo.jpg"
                        },
                        new
                        {
                            Id = 3L,
                            ArticleId = 2L,
                            FileName = "labradorThree",
                            ImageData = "https://uapasvideos.blob.core.windows.net/videos/D:/video/labradorThree.jpg"
                        });
                });

            modelBuilder.Entity("Domain.Models.ArticleTag", b =>
                {
                    b.Property<long>("ArticleId")
                        .HasColumnType("bigint");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArticleId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ArticleTags");

                    b.HasData(
                        new
                        {
                            ArticleId = 1L,
                            TagId = 1L
                        },
                        new
                        {
                            ArticleId = 2L,
                            TagId = 3L
                        },
                        new
                        {
                            ArticleId = 2L,
                            TagId = 5L
                        });
                });

            modelBuilder.Entity("Domain.Models.AttitudeTo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("AttitudeTo");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Childrens"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Cats"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Dogs"
                        });
                });

            modelBuilder.Entity("Domain.Models.BookOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AnimalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ClosingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserMotivation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("UserId");

                    b.ToTable("BookOrders");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AdminComment = "i can not approve your request, because I I couldn't reach you",
                            AnimalId = 6L,
                            ClosingDate = new DateTime(2019, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndingDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            UserId = "1",
                            UserMotivation = "I want to book this pet, because i love cats"
                        },
                        new
                        {
                            Id = 2L,
                            AnimalId = 7L,
                            ClosingDate = new DateTime(2019, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndingDate = new DateTime(2019, 11, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            UserId = "2",
                            UserMotivation = "I want to book this pet, because i like it, and i want to take care of him"
                        },
                        new
                        {
                            Id = 3L,
                            AdminComment = "I can not approve your request, because your reason is dont enought for booking pet",
                            AnimalId = 12L,
                            ClosingDate = new DateTime(2019, 11, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndingDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            UserId = "1",
                            UserMotivation = "I want to book this pet, because my doughter like dogs"
                        });
                });

            modelBuilder.Entity("Domain.Models.Breed", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BreedEnglish")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("BreedUkrainian")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Breed");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BreedEnglish = "Abyssinian",
                            BreedUkrainian = "абіссінський"
                        },
                        new
                        {
                            Id = 2L,
                            BreedEnglish = "Kintamani",
                            BreedUkrainian = "Кінтамані"
                        },
                        new
                        {
                            Id = 3L,
                            BreedEnglish = "Japanese Terrier",
                            BreedUkrainian = "Японський Тер'єр"
                        },
                        new
                        {
                            Id = 4L,
                            BreedEnglish = "Birman",
                            BreedUkrainian = "Бірманська кішка"
                        },
                        new
                        {
                            Id = 5L,
                            BreedEnglish = "Greyhound",
                            BreedUkrainian = "Хорт"
                        },
                        new
                        {
                            Id = 6L,
                            BreedEnglish = "French Bulldog",
                            BreedUkrainian = "Французький бульдог"
                        },
                        new
                        {
                            Id = 7L,
                            BreedEnglish = "Bengal",
                            BreedUkrainian = "Бенгальський"
                        },
                        new
                        {
                            Id = 8L,
                            BreedEnglish = "McNab dog",
                            BreedUkrainian = "Собака Макнаба"
                        },
                        new
                        {
                            Id = 9L,
                            BreedEnglish = "Sapsali",
                            BreedUkrainian = "Сапсали"
                        },
                        new
                        {
                            Id = 10L,
                            BreedEnglish = "Pungsan dog",
                            BreedUkrainian = "Собака Пуссан"
                        },
                        new
                        {
                            Id = 11L,
                            BreedEnglish = "Kai Ken",
                            BreedUkrainian = "Кай Кен"
                        });
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Dog"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Cat"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Others"
                        });
                });

            modelBuilder.Entity("Domain.Models.Defect", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Defects");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Type = "Front pow disability"
                        },
                        new
                        {
                            Id = 2L,
                            Type = "Back pow disability"
                        },
                        new
                        {
                            Id = 3L,
                            Type = "Vision disability"
                        },
                        new
                        {
                            Id = 4L,
                            Type = "Hearing disability"
                        });
                });

            modelBuilder.Entity("Domain.Models.Food", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Foods");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Premium feed"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Medical feed"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Natural feed"
                        });
                });

            modelBuilder.Entity("Domain.Models.Help", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("KindOfHelp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Helps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            KindOfHelp = "Transport"
                        },
                        new
                        {
                            Id = 2,
                            KindOfHelp = "Walking"
                        },
                        new
                        {
                            Id = 3,
                            KindOfHelp = "Temporary placement"
                        },
                        new
                        {
                            Id = 4,
                            KindOfHelp = "Other"
                        });
                });

            modelBuilder.Entity("Domain.Models.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AnimalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AnimalId = 2L,
                            FileName = "frenchBulldog",
                            ImageData = "https://uapasvideos.blob.core.windows.net/videos/D:/video/frenchBulldog.jpg"
                        },
                        new
                        {
                            Id = 2L,
                            AnimalId = 2L,
                            FileName = "frenchBulldogTwo",
                            ImageData = "https://uapasvideos.blob.core.windows.net/videos/D:/video/frenchBulldogTwo.jpg"
                        },
                        new
                        {
                            Id = 3L,
                            AnimalId = 3L,
                            FileName = "germanDog",
                            ImageData = "https://uapasvideos.blob.core.windows.net/videos/D:/video/germanDog.jpg"
                        },
                        new
                        {
                            Id = 4L,
                            AnimalId = 3L,
                            FileName = "germanDogTwo",
                            ImageData = "https://uapasvideos.blob.core.windows.net/videos/D:/video/germanDogTwo.jpg"
                        },
                        new
                        {
                            Id = 5L,
                            AnimalId = 4L,
                            FileName = "haski",
                            ImageData = "https://uapasvideos.blob.core.windows.net/videos/D:/video/haski.jpg"
                        },
                        new
                        {
                            Id = 6L,
                            AnimalId = 5L,
                            FileName = "haskiThree",
                            ImageData = "https://uapasvideos.blob.core.windows.net/videos/D:/video/haskiThree.jpg"
                        },
                        new
                        {
                            Id = 7L,
                            AnimalId = 6L,
                            FileName = "haskiTwo",
                            ImageData = "https://uapasvideos.blob.core.windows.net/videos/D:/video/haskiTwo.jpg"
                        },
                        new
                        {
                            Id = 8L,
                            AnimalId = 7L,
                            FileName = "horse",
                            ImageData = "https://uapasvideos.blob.core.windows.net/videos/D:/video/horse.jpg"
                        },
                        new
                        {
                            Id = 9L,
                            AnimalId = 8L,
                            FileName = "horseTwo",
                            ImageData = "https://uapasvideos.blob.core.windows.net/videos/D:/video/horseTwo.jpg"
                        },
                        new
                        {
                            Id = 10L,
                            AnimalId = 9L,
                            FileName = "kit",
                            ImageData = "https://uapasvideos.blob.core.windows.net/videos/D:/video/kit.jpeg"
                        },
                        new
                        {
                            Id = 11L,
                            AnimalId = 10L,
                            FileName = "kitThree",
                            ImageData = "https://uapasvideos.blob.core.windows.net/videos/D:/video/kitThree.jpeg"
                        },
                        new
                        {
                            Id = 12L,
                            AnimalId = 11L,
                            FileName = "kitTwo",
                            ImageData = "https://uapasvideos.blob.core.windows.net/videos/D:/video/kitTwo.jpeg"
                        },
                        new
                        {
                            Id = 13L,
                            AnimalId = 12L,
                            FileName = "labrador",
                            ImageData = "https://uapasvideos.blob.core.windows.net/videos/D:/video/labrador.jpg"
                        },
                        new
                        {
                            Id = 14L,
                            AnimalId = 13L,
                            FileName = "labradorThree",
                            ImageData = "https://uapasvideos.blob.core.windows.net/videos/D:/video/labradorThree.jpg"
                        },
                        new
                        {
                            Id = 15L,
                            AnimalId = 14L,
                            FileName = "labradorTwo",
                            ImageData = "https://uapasvideos.blob.core.windows.net/videos/D:/video/labradorTwo.jpg"
                        },
                        new
                        {
                            Id = 16L,
                            AnimalId = 14L,
                            FileName = "vivcharka",
                            ImageData = "https://uapasvideos.blob.core.windows.net/videos/D:/video/vivcharka.jpg"
                        },
                        new
                        {
                            Id = 17L,
                            AnimalId = 14L,
                            FileName = "vivcharkaTwo",
                            ImageData = "https://uapasvideos.blob.core.windows.net/videos/D:/video/vivcharkaTwo.jpg"
                        });
                });

            modelBuilder.Entity("Domain.Models.Keeping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Keepings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Flat"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Enclosed house with yard"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Wintering only in the house"
                        });
                });

            modelBuilder.Entity("Domain.Models.Needs", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Needs");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Need to be housed with other animals"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Need to be housed apart from other animals"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Need for a suitable diet"
                        });
                });

            modelBuilder.Entity("Domain.Models.Processing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Processings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Type = "Anti-flea and anti-ticks processing"
                        },
                        new
                        {
                            Id = 2L,
                            Type = "Anti-worms processing"
                        });
                });

            modelBuilder.Entity("Domain.Models.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Vaccination"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Keepings"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Defects"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Proccesing"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "AnimalHealth"
                        });
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            AddressId = 2L,
                            ConcurrencyStamp = "c859f7d8-147f-48e0-b86a-7b4289aee732",
                            Email = "pets.adoption.service@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Super main admin",
                            LastActive = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "PETS.ADOPTIONS.SERVICE@GMAIL.COM",
                            NormalizedUserName = "PETS.ADOPTIONS.SERVICE@GMAIL.COM",
                            PhoneNumber = "0974128341",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "26444d83-a9cb-4c5b-a2b8-97be56043658",
                            TwoFactorEnabled = false,
                            UserName = "pets.adoption.service@gmail.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            AddressId = 3L,
                            ConcurrencyStamp = "6786fdcc-c4d2-41e5-b015-7b5b80894758",
                            Email = "service@gmail.com",
                            EmailConfirmed = true,
                            FullName = "just admin",
                            LastActive = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "SERVICE@GMAIL.COM",
                            NormalizedUserName = "SERVICE@GMAIL.COM",
                            PhoneNumber = "0974128342",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d40709fe-db96-44e9-8f1c-546e87a4c66f",
                            TwoFactorEnabled = false,
                            UserName = "service@gmail.com"
                        });
                });

            modelBuilder.Entity("Domain.Models.UserHelp", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("HelpId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "HelpId");

                    b.HasIndex("HelpId");

                    b.ToTable("UserHelps");
                });

            modelBuilder.Entity("Domain.Models.Vaccination", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Vaccinations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Daramoon",
                            Type = "Common"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Vangard",
                            Type = "Common"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Nobivak",
                            Type = "Common"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Rabisin",
                            Type = "Rabies vaccine"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Rabistar",
                            Type = "Rabies vaccine"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "8d9b6fa6-2890-4abd-9926-df0edd239c21",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "e362220a-204b-46d5-866c-103b3a0c732b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "222d3cdf-b4a0-40ac-8f2a-35698921250e",
                            Name = "Observer",
                            NormalizedName = "OBSERVER"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "d6636128-89c0-456a-a9e7-e03799b86037",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.Models.AdoptOrder", b =>
                {
                    b.HasOne("Domain.Models.Animal", "Animal")
                        .WithMany("AdoptOrders")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("AdoptOrders")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Models.Animal", b =>
                {
                    b.HasOne("Domain.Models.Address", "Address")
                        .WithMany("Animals")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Breed", "Breed")
                        .WithMany("Animals")
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Category", "Category")
                        .WithMany("Animals")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Food", "Food")
                        .WithMany("Animals")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.AnimalAttitudeTo", b =>
                {
                    b.HasOne("Domain.Models.Animal", "Animal")
                        .WithMany("AnimalAttitudes")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.AttitudeTo", "AttitudeTo")
                        .WithMany("AnimalAttitudes")
                        .HasForeignKey("AttitudeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.AnimalDefects", b =>
                {
                    b.HasOne("Domain.Models.Animal", "Animal")
                        .WithMany("AnimalDefects")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Defect", "Defect")
                        .WithMany("AnimalDefects")
                        .HasForeignKey("DefectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.AnimalDescription", b =>
                {
                    b.HasOne("Domain.Models.Animal", "Animal")
                        .WithOne("Description")
                        .HasForeignKey("Domain.Models.AnimalDescription", "AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.AnimalKeeping", b =>
                {
                    b.HasOne("Domain.Models.Animal", "Animal")
                        .WithMany("AnimalKeepings")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Keeping", "Keeping")
                        .WithMany("AnimalKeepings")
                        .HasForeignKey("KeepingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.AnimalLocationHistory", b =>
                {
                    b.HasOne("Domain.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.Animal", "Animal")
                        .WithMany("AnimalLocationHistories")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.AnimalNeeds", b =>
                {
                    b.HasOne("Domain.Models.Animal", "Animal")
                        .WithMany("AnimalNeeds")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Needs", "Needs")
                        .WithMany("AnimalNeeds")
                        .HasForeignKey("NeedsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.AnimalProcessing", b =>
                {
                    b.HasOne("Domain.Models.Animal", "Animal")
                        .WithMany("AnimalProcessings")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Processing", "Processing")
                        .WithMany("AnimalProcessings")
                        .HasForeignKey("ProcessingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.AnimalVaccination", b =>
                {
                    b.HasOne("Domain.Models.Animal", "Animal")
                        .WithMany("AnimalVaccinations")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Vaccination", "Vaccination")
                        .WithMany("AnimalVaccinations")
                        .HasForeignKey("VaccinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.AnimalVideo", b =>
                {
                    b.HasOne("Domain.Models.Animal", "Animal")
                        .WithMany("Videos")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.AnimalViewLocation", b =>
                {
                    b.HasOne("Domain.Models.Animal", "Animal")
                        .WithMany("AnimalViewLocations")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Article", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Models.ArticleImage", b =>
                {
                    b.HasOne("Domain.Models.Article", "Article")
                        .WithMany("Images")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.ArticleTag", b =>
                {
                    b.HasOne("Domain.Models.Article", "Article")
                        .WithMany("ArticleTags")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Tag", "Tag")
                        .WithMany("ArticleTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.BookOrder", b =>
                {
                    b.HasOne("Domain.Models.Animal", "Animal")
                        .WithMany("BookOrders")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("BookOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Models.Image", b =>
                {
                    b.HasOne("Domain.Models.Animal", "Animal")
                        .WithMany("Images")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.HasOne("Domain.Models.Address", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.UserHelp", b =>
                {
                    b.HasOne("Domain.Models.Help", "Help")
                        .WithMany("UserHelps")
                        .HasForeignKey("HelpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("UserHelps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
